<?php

/**
 * @file
 *   Theme and other items.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\node\Entity\Node;

/**
 * Implements hook_theme().
 */
function nmhockey_stats_theme($existing, $type, $theme, $path) {
  return [
    'field__field_data' => [
      'base hook' => 'field',
    ],
  ];
}

/**
 * Implements hook_inline_entity_form_table_fields_alter().
 */
function nmhockey_stats_inline_entity_form_table_fields_alter(&$fields, $context) {
  $node = $context;
  if ($context['entity_type'] == 'node') {
    // if (in_array('player', $context['allowed_bundles'])) {
    unset($fields['status']);
    // }

    if ($context['parent_bundle'] === 'league'){
      if (in_array('games', $context['allowed_bundles'])) {
        unset($fields['label']);

        $fields['field_game_date'] = [
          'type' => 'field',
          'label' => 'Date/Time',
          'display_options' => [
            'type' => 'short'
          ],
        ];
        $fields['field_game_team_away'] = [
          'type' => 'field',
          'label' => 'Away',
        ];
        $fields['field_game_team_home'] = [
          'type' => 'field',
          'label' => 'Home',
        ];
      }
    }
  }

  // select p.name , sum(goals + assists), goals, assists, pim from players p, goals g, penalties pn where
}

function nmhockey_stats_inline_entity_form_entity_form_alter(array &$entity_form, \Drupal\Core\Form\FormStateInterface &$form_state) {

  $bundle = $entity_form['#bundle'];
  $parent = $form_state->getFormObject()->getEntity();
  $parent_type = $parent->getType();
  $parent_nid = $parent->id();
  $input = $form_state->getUserInput();
  // What's the parent? Does it matter?
  if ($parent_type === 'league') {
    if ($bundle === 'teams') {
      // Add $parent_nid to Season field.
      $entity_form['field_season']['widget']['#options'] = [
        $parent_nid => $parent->label(),
      ];
    }
    if ($bundle === 'games') {
      // Add $parent_nid to season field.
      $entity_form['field_game_season']['widget']['#options'] = [
        $parent_nid => $parent->label(),
      ];

      // Restrict teams from this season.
      $options = [];
      foreach ($parent->get('field_teams')->getValue() as $item) {
        $nid = $item['target_id'];
        $t = Node::load($nid);
        $options[$nid] = $t->label();

      }
      $entity_form['field_game_team_home']['widget']['#options'] = $options;
      $entity_form['field_game_team_away']['widget']['#options'] = $options;

    }
  }
  if ($parent_type === 'games') {
    $field = $entity_form['#ief_id'];

    $home = Node::load($input['field_game_team_home']);
    $home_players = $home->get('field_roster')->referencedEntities();
    $home_player_options = ['' => 'Select'];
    if ($home_players) {
      foreach ($home_players as $player) {
        $home_player_options[$player->id()] = $player->label();
      }
    }
    $away = Node::load($input['field_game_team_away']);
    $away_players = $away->get('field_roster')->referencedEntities();
    $away_player_options = ['' => 'Select'];
    if ($away_players) {
      foreach ($away_players as $player) {
        $away_player_options[$player->id()] = $player->label();
      }
    }

    // Subs?
    $home_subs = $parent->get('field_game_subs_home')->referencedEntities();
    $home_sub_options = [];
    foreach ($home_subs as $sub) {
      $player = $sub->get('field_player')->entity->id();
      $sub_player = $sub->get('field_substitution')->entity;
      unset($home_player_options[$player]);
      $home_sub_options[$sub_player->id()] = $sub_player->label();
    }
    $away_subs = $parent->get('field_game_subs_away')->referencedEntities();
    $away_sub_options = [];
    foreach ($away_subs as $sub) {
      $player = $sub->get('field_player')->entity->id();
      $sub_player = $sub->get('field_substitution')->entity;
      unset($away_player_options[$player]);
      $away_sub_options[$sub_player->id()] = $sub_player->label();
    }

    if ($bundle === 'substitution') {
      $player_options = ($field === 'field_game_subs_home-form') ? $home_player_options : $away_player_options;
      // Restrict players to team.
      $entity_form['field_player']['widget']['#options'] = $player_options;
    }

    // Combine players and subs.
    $home_player_options += $home_sub_options;
    $away_player_options += $away_sub_options;

    if ($bundle === 'goal') {
      // Home or away?
      if ($field === "field_game_goals_home-form") {
        $player_options = $home_player_options;
        $team_options[$home->id()] = $home->label();
      }
      if ($field === 'field_game_goals_away-form') {
        $player_options = $away_player_options;
        $team_options[$away->id()] = $away->label();
      }

      $entity_form['field_goal_player']['widget']['#options'] = $player_options;
      $entity_form['field_assist']['widget']['#options'] = $player_options;
      $entity_form['field_assist_2']['widget']['#options'] = $player_options;
      // Add parent_nid (game) to field_game.
      $entity_form['field_game']['widget']['#options'] = [
        $parent_nid => $parent->label(),
      ];

      // Restrict field_team to home or away.
      $entity_form['field_team']['widget']['#options'] = $team_options;
    }
    if ($bundle === 'penalty') {
      if ($field === "field_game_penalty_home-form") {
        $player_options = $home_player_options;
        $team_options[$home->id()] = $home->label();
      }
      if ($field === 'field_game_penalty_away-form') {
        $player_options = $away_player_options;
        $team_options[$away->id()] = $away->label();
      }

      // Restrict players to team.
      $entity_form['field_penalty_player']['widget']['#options'] = $player_options;
      // Add parent_nid (game) to field_penalty_game.
      $entity_form['field_penalty_game']['widget']['#options'] = [
        $parent_nid => $parent->label(),
      ];
      // Restrict field_team to home or away.
      $entity_form['field_penalty_team']['widget']['#options'] = $team_options;

    }
  }
}

function nmhockey_stats_node_view($build, $node, $display, $view_mode) {

  $type = $node->getType();
  if ($type === 'goal') {
    $node->label .= 'Hi!';
  }

  if ($type === 'games') {
    $node->label .= 'Game';

  }
}

function nmhockey_stats_entity_update(EntityInterface $entity) {
  $type = $entity->getEntityTypeId();
  if ($type === 'node') {
    $bundle = $entity->getType();
    $nid = $entity->id();
    if ($bundle === 'team') {
      $season = $entity->get('field_season')->referencedEntities()[0];
      if ($season) {
        $teams = $season->get('field_teams')->referencedEntities();
        $hasTeam = FALSE;
        foreach($teams as $team) {
          if ($team->id() === $nid) $hasTeam = TRUE;
        }
        if (!$hasTeam) {
          $teams[] = ['target_id' => $nid];
          $season->set('field_teams', $teams);
          $season->save();
        }
      }
    }
    if ($bundle === 'games') {
      $season = $entity->get('field_game_season')->referencedEntities()[0];
      if ($season) {
        $games = $season->get('field_games')->referencedEntities();
        $hasGame = FALSE;
        foreach ($games as $game) {
          if ($game->id() === $nid) {
            $hasGame = TRUE;
          }
        }
        if (!$hasGame) {
          $season_games[] = ['target_id' => $nid];
          $season->set('field_games', $season_games);
          $season->save();
        }
      }
    }
  }
}
