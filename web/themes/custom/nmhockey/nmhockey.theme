<?php declare(strict_types = 1);

/**
 * @file
 * Functions to support theming in the nmhockey theme.
 */

use Drupal\Core\Link;
use Drupal\Core\Url;
use \Drupal\node\Entity\Node;

/**
 * Implements hook_preprocess_HOOK() for html.html.twig.
 */
function nmhockey_preprocess_html(array &$variables): void {

}

/**
 * Implements hook_preprocess_HOOK() for page.html.twig.
 */
function nmhockey_preprocess_page(array &$variables): void {

}

/**
 * Implements hook_preprocess_HOOK() for node.html.twig.
 */
function nmhockey_preprocess_node(array &$variables): void {

  $date_formatter = \Drupal::service('date.formatter');

  $node = $variables['node'];
  $type = $node->getType();

  if ($type === 'team') {
    $team = $node;
    $roster = $node->get('field_roster')->referencedEntities();
    $team_id = $node->id();

    $players = [];
    $player_rows = [];
    foreach ($roster as $player) {
      $pid = $player->id();
      $players[$pid] = $player;
      $player_rows['name'][$pid] = $player->label();
      $player_rows['goals'][$pid] = 0;
      $player_rows['assists'][$pid] = 0;
      $player_rows['points'][$pid] = 0;
      $player_rows['pim'][$pid] = 0;
    }

    $goalie_entities = $node->get('field_team_goalie')->referencedEntities();
    $goalie_rows = [];
    $goalies = [];
    foreach ($goalie_entities as $goalie) {
      $gid = $goalie->id();
      $goalies[$gid] = $goalie;
      $goalie_rows['name'][$gid] = $goalie->label();
      $goalie_rows['gp'][$gid] = 0;
      $goalie_rows['w'][$gid] = 0;
      $goalie_rows['l'][$gid] = 0;
      $goalie_rows['otl'][$gid] = 0;
      /*
      - { header: "ROW", data: ['0']}
      - { header: "GAA", data: ['0']}
      - { header: "SP", data: ['0']}
      - { header: "GA", data: ['0']}
      - { header: "SVs", data: ['0']}
      */
    }

    // Get all Games in season.
    $query = \Drupal::entityQuery('node')
      ->condition('type', 'games')
      ->accessCheck(TRUE);

    $or = $query->orConditionGroup();
    $or->condition('field_game_team_home', $node->id(), '=');
    $or->condition('field_game_team_away', $node->id(), '=');
    $query->condition($or);
    $game_nids = $query->execute();
    $games = Node::loadMultiple($game_nids);

    $game_results = [
      'w' => 0,
      'l' => 0,
      'otl' => 0,
    ];
    foreach($games as $nid => $game) {
      $date_ts = $game->get('field_game_date')->date->getTimestamp();
      $date = $date_formatter->format($date_ts, 'short');
      $url = Url::fromRoute('entity.node.canonical', ['node' => $game->id()]);
      $link = Link::fromTextAndUrl($date, $url);
      $game_result = 'TBD';

      $h_team = $game->get('field_game_team_home')->referencedEntities();
      $v_team = $game->get('field_game_team_away')->referencedEntities();

      $hgoals = $game->get('field_game_goals_home')->referencedEntities();
      $agoals = $game->get('field_game_goals_away')->referencedEntities();

      $h_goals = count($hgoals);
      $a_goals = count($agoals);
      $isHome = 'Away';
      if ($h_team && $v_team) {
        $isHome = $h_team[0]->id() == $team_id ? 'Home' : 'Away';
        if ($isHome === 'Home') {
          $opponent = $v_team[0]->label();
          foreach ($hgoals as $g) {
            $goal_player = $g->get('field_goal_player')->entity->id();
            $player_rows['goals'][$goal_player]++;
            $a_player = $g->get('field_assist')->entity;
            if ($a_player) {
              $player_rows['assists'][$a_player->id()]++;
            }
            $aa_player = $g->get('field_assist_2')->entity;
            if ($aa_player) {
              $player_rows['assists'][$aa_player->id()]++;
            }
          }
          $goalie_stats = $game->get('field_game_goalie_stats_home')->value;

        }
        else {
          $opponent = $h_team[0]->label();
          foreach ($agoals as $g) {
            $goal_player = $g->get('field_goal_player')->entity;
            if ($goal_player) {;
              if (in_array($goal_player->id(), array_keys($players))) {
                $player_rows['goals'][$goal_player->id()]++;
                $player_rows['points'][$goal_player->id()]++;
              }
            }
            $a_player = $g->get('field_assist')->entity;
            if ($a_player) {
              if (in_array($a_player->id(), array_keys($players))){
                $player_rows['assists'][$a_player->id()]++;
                $player_rows['points'][$a_player->id()]++;
              }
            }
            $aa_player = $g->get('field_assist_2')->entity;
            if ($aa_player) {
              if (in_array($aa_player->id(), array_keys($players))){
                $player_rows['assists'][$aa_player->id()]++;
                $player_rows['points'][$aa_player->id()]++;
              }
            }
          }
          $goalie = $game->get('field_game_goalie_away')->entity;
          if ($goalie && in_array($goalie->id(), array_keys($goalies))) {
            $goalie_stats = $game->get('field_game_goalie_stats_away')->getValue()[0];
            switch ($goalie_stats['w_l_otl']) {
              case 'win':
                $goalie_rows['w'][$goalie->id()]++;
                $game_results['w']++;
                $game_result = 'W';
                break;
              case 'loss':
                $goalie_rows['l'][$goalie->id()]++;
                $game_results['l']++;
                $game_result = 'L';
                break;
              case 'otl':
                $goalie_rows['otl'][$goalie->id()]++;
                $game_results['otl']++;
                $game_result = 'OTL';
            }
            $goalie_rows['gp'][$goalie->id()]++;
          }

        }
      }

      $score = '-';
      if ($date_ts <= time()) {
        if ($isHome === 'Home') {
          $score = $h_goals . ' - ' . $a_goals;
        }
        else {
          $score = $a_goals . ' - ' . $h_goals;
        }
      }
      $game_rows['date'][] = $link;
      $game_rows['team'][] = $opponent;
      $game_rows['score'][] = $score;
      $game_rows['hv'][] = $isHome;
      $game_rows['result'][$game->id()] = $game_result;
    }

    $variables['goalies'] = [];
    if (count($goalie_rows)) {
      $variables['goalies'] = [
        ['header' => "Name", 'data' => $goalie_rows['name']],
        ['header' => 'GP', 'data' => $goalie_rows['gp']],
        ['header' => 'W', 'data' => $goalie_rows['w']],
        ['header' => 'L', 'data' => $goalie_rows['l']],
        ['header' => 'OTL', 'data' => $goalie_rows['otl']],
      /*
      - { header: "ROW", data: ['6']}
      - { header: "GAA", data: ['3.62']}
      - { header: "SP", data: ['90.7']}
      - { header: "GA", data: ['47']}
      - { header: "SVs", data: ['461']}
      */
      ];
    }

    if (count($game_rows)) {
      $variables['games'] = [
        ['header' => "Date", 'data' => $game_rows['date']],
        ['header' => "Team", 'data' => $game_rows['team']],
        ['header' => "Home - Away", 'data' => $game_rows['hv']],
        ['header' => "Score", 'data' => $game_rows['score']],
        ['header' => "WLT", 'data' => $game_rows['result']],
      ];
    }

    if (count($player_rows)) {
      $variables['players'] = [
        ['header' => "Player", 'data' => $player_rows['name']],
        ['header' => "G", 'data' => $player_rows['goals']],
        ['header' => "A", 'data' => $player_rows['assists']],
        ['header' => "Pts", 'data' => $player_rows['points']],
        ['header' => "PIM", 'data' => $player_rows['pim']],
      ];
    }
    $variables['record'] = implode(' - ', $game_results);

  }

  if ($type === 'games') {
    $time = $node->get('field_game_date')->value;
    $date = date_create($time);
    $variables['subtitle'] = date_format($date,"M d Y h:ia");

    $variables['goals'] = [
      '1' => [],
      '2' => [],
      '3' => [],
      '4' => [],
    ];
    $hgoals = $node->get('field_game_goals_home')->referencedEntities();
    $vgoals = $node->get('field_game_goals_away')->referencedEntities();
    // Process Home.
    $home_data = [
      'team' => 'home',
      'node' => $node->get('field_game_team_home')->entity,
      'goals' => $hgoals,
      'goalie' => $node->get('field_game_goalie_home')->entity,
      'goalie_stats' => $node->get('field_game_goalie_stats_home')->getValue(),
    ];
    _team_data($home_data, $variables);

    // Process Away,
    $away_data = [
      'team' => 'visitor',
      'node' => $node->get('field_game_team_away')->entity,
      'goals' => $vgoals,
      'goalie' => $node->get('field_game_goalie_away')->entity,
      'goalie_stats' => $node->get('field_game_goalie_stats_away')->getValue(),
    ];
    _team_data($away_data, $variables);

    $variables['penalties'] = [
      '1' => [],
      '2' => [],
      '3' => [],
      '4' => [],
    ];
    $hpen = $node->get('field_game_penalty_home')->referencedEntities();
    $apen = $node->get('field_game_penalty_away')->referencedEntities();
    $penalties = array_merge($hpen, $apen);
    foreach ($penalties as $penalty) {
      $pdata = $penalty->get('field_penalty_stats')->getValue()[0];
      $pp = $pdata['penalty_period'];
      $pt = $pdata['penalty_minute'] . ':' . $pdata['penalty_seconds'];
      $player = $penalty->get('field_penalty_player')->entity;
      $variables['penalties'][$pp][$pt] = [
        "time" => $pt,
        "player_number" => $player->get('field_number')->value ?? '0',
        "player_name" => $player->get('title')->value,
        "detail" => "Hooking, " . $pdata['penalty_duration'] . "min",
        "team" => $penalty->get('field_penalty_team')->entity->get('title')->value,
      ];
    }

  }

  if ($type === 'goal') {
    $data = _goal_data($node);
    $data = $node->get('field_goal_stats')->getValue()[0];
    $variables['time'] = $data['time'];
    $variables['period'] = $data['period'];
    $variables['player'] = $data['player'];
    $variables['number'] = $data['number'];
    $variables['team'] = $data['team'];
    $variables['details'] = $data['details'];

  }

  if ($type === 'penalty') {
    $data = $node->get('field_penalty_stats')->getValue()[0];
    $variables['time'] = $data['penalty_minute'] . ':' . $data['penalty_seconds'];
    $variables['period'] = $data['penalty_period'];
    $variables['detail'] = $node->label() . ' ' . $data['penalty_duration'];
    $variables['team'] = $node->get('field_penalty_team')->entity->get('title')->value;
    $variables['player'] = $node->get('field_penalty_player')->entity->get('title')->value;
    $variables['number'] = $node->get('field_penalty_player')->entity->get('field_number')->value;
  }

  if ($type === 'league') {
    $season_id = $node->id();
    $teams = $players = $goalies = $games = [];
    // Get all Teams in season.
    $query = \Drupal::entityQuery('node')
      ->condition('type', 'team')
      ->condition('field_season', $season_id, '=')
      ->accessCheck(TRUE);
    $team_nids = $query->execute();
    $team_nodes = Node::loadMultiple($team_nids);
    foreach ($team_nodes as $team_nid => $team) {
      $team_name = $team->label();
      $url = Url::fromRoute('entity.node.canonical', ['node' => $team->id()]);
      $link = Link::fromTextAndUrl($team_name, $url);
      $teams['name'][$team_nid] = $link;
      $teams['wins'][$team_nid] = 0;
      $teams['loss'][$team_nid] = 0;
      $teams['otl'][$team_nid] = 0;
      $teams['points'][$team_nid] = 0;
      $teams['roster'][$team_nid] = [];
      $teams['goalies'][$team_nid] = [];

      // Get all Players from Teams
      $player_items = $team->get('field_roster')->referencedEntities();
      foreach ($player_items as $player) {
        $player_nid = $player->id();
        $teams['roster'][$team_nid][] = $player_nid;
        $players['name'][$player_nid] = $player->label();
        $players['team'][$player_nid] = $team_name;
        $players['games_played'][$player_nid] = 0;
        $players['goals'][$player_nid] = 0;
        $players['assists'][$player_nid] = 0;
        $players['points'][$player_nid] = 0;
        $players['pim'][$player_nid] = 0;
      }
      // Get all Goalies from Teams.
      $team_goalies = $team->get('field_team_goalie')->referencedEntities();
      foreach($team_goalies as $goalie) {
        $goalie_nid = $goalie->id();
        // $team['goalies'][$team_nid][] = $goalie_nid;
        $goalies['name'][$goalie_nid] = $goalie->label();
        $goalies['team'][$goalie_nid] = $team_name;
        $goalies['gp'][$goalie_nid] = 0;
        $goalies['w'][$goalie_nid] = 0;
        $goalies['l'][$goalie_nid] = 0;
        $goalies['otl'][$goalie_nid] = 0;
        $goalies['gaa'][$goalie_nid] = 0;
        $goalies['sp'][$goalie_nid] = 0;
        $goalies['ga'][$goalie_nid] = 0;
        $goalies['sv'][$goalie_nid] = 0;
      }
    }

    // Get all Games in season.
    $query = \Drupal::entityQuery('node')
      ->condition('type', 'games')
      ->condition('field_game_season', $season_id, '=')
      ->accessCheck(TRUE);
    $game_nids = $query->execute();
    $game_nodes = Node::loadMultiple($game_nids);
    foreach($game_nodes as $game_nid => $game) {
      // For datetime fields you can also do this.
      $time = $game->get('field_game_date')->value;
      $date_create = date_create($time);
      $date = date_format($date_create,"M d Y h:ia");

      $url = Url::fromRoute('entity.node.canonical', ['node' => $game->id()]);
      $link = Link::fromTextAndUrl($date, $url);

      $game_home = $game->get('field_game_team_home')->referencedEntities();
      $home_name = 'TBD';
      if (count($game_home)) {
        $game_home = $game_home[0];
        $home_name = $game_home->label();
      }
      $game_home_goals = $game->get('field_game_goals_home')->referencedEntities();

      $game_away = $game->get('field_game_team_away')->referencedEntities();
      $away_name = 'TBD';
      if (count($game_away)) {
        $game_away = $game_away[0];
        $away_name = $game_away->label();
      }
      $game_away_goals = $game->get('field_game_goals_away')->referencedEntities();
      if ($game_home && $game_away) {
        $games['date'][$game_nid] = $link;
        $games['away'][$game_nid] = $away_name;
        $games['score'][$game_nid] = count($game_away_goals) . ' - ' . count($game_home_goals);
        $games['home'][$game_nid] = $home_name;
      }
      // Get all Goals from Games.
      $game_goals = array_merge($game_home_goals, $game_away_goals);
      foreach($game_goals as $goal) {
        // $goal_team = $goal->get('field_team')->entity;
        $g = $goal->get('field_goal_player')->entity;
        if ($g) {
          $players['goals'][$g->id()]++;
          $players['points'][$g->id()]++;
        }
        $a = $goal->get('field_assist')->entity;
        if ($a) {
          $players['assists'][$a->id()]++;
          $players['points'][$a->id()]++;
        }
        $aa = $goal->get('field_assist_2')->entity;
        if ($aa) {
          $players['assists'][$aa->id()]++;
          $players['points'][$aa->id()]++;
        }
      }

      // Get all Penalties from Games.
      $game_penalties = array_merge($game->get('field_game_penalty_home')->referencedEntities(), $game->get('field_game_penalty_away')->referencedEntities());
      if (count($game_penalties)) {
        foreach($game_penalties as $penalty) {
          $pdata = $penalty->get('field_penalty_stats')->getValue()[0];
          $pid = $penalty->get('field_penalty_player')->entity->id();
          $players['pim'][$pid] += $pdata['penalty_duration'];
        }
      }

      // Get all Goalie Stats from Games
    }

    // Catch.
    $variables += [
      'team_table' => [],
      'games_table' => [],
      'player_table' => [],
      'goalie_table' => [],
    ];

    if (count($teams)) {
      $variables['team_table'] = [
        ['header' => 'Team','data'=> $teams['name']],
        ['header' => 'W', 'data' => $teams['wins']],
        ['header' => 'L', 'data' => $teams['loss']],
        ['header' => 'OTL', 'data' => $teams['otl']],
        ['header' => 'Points', 'data' => $teams['points']],
      ];
    }
    if (count($games)) {
      $variables['games_table'] = [
        ['header' => 'Date/Time', 'data' => $games['date']],
        ['header' => 'Away', 'data' => $games['away']],
        ['header' => 'Score', 'data' => $games['score']],
        ['header' => 'Home', 'data' => $games['home']],
      ];
    }
    if (count($players)) {
      $variables['player_table'] = [
        ['header' => 'Player', 'data' => $players['name']],
        // ['header' => 'Team', 'data' => $players['team']],
        // ['header' => 'GP', 'data' => $players['games_played']],
        ['header' => 'G', 'data' => $players['goals']],
        ['header' => 'A', 'data' => $players['assists']],
        ['header' => 'Pts', 'data' => $players['points']],
        ['header' => 'PIM', 'data' => $players['pim']],
      ];
    }
    if (count($goalies)) {
      $variables['goalie_table'] = [
        ['header' => 'Player', 'data' => $goalies['name']],
        // ['header' => 'Team', 'data' => $goalies['team']],
        // ['header' => 'GP', 'data' => $goalies['gp']],
        ['header' => 'W', 'data' => $goalies['w']],
        ['header' => 'L', 'data' => $goalies['l']],
        ['header' => 'OTL', 'data' => $goalies['otl']],
        ['header' => 'GAA', 'data' => $goalies['gaa']],
        ['header' => 'SP', 'data' => $goalies['sp']],
        ['header' => 'GA', 'data' => $goalies['ga']],
        ['header' => 'SV', 'data' => $goalies['sv']],
      ];
    }
  }
}

function _team_data($data, &$variables) {

  $team_node = $data['node'];
  if ($team_node) {
    $team_name = $team_node->label();
    $url = Url::fromRoute('entity.node.canonical', ['node' => $team_node->id()]);
    $team_title = Link::fromTextAndUrl($team_name, $url)->toString();
  }
  else {
    $team_name = 'TBD';
    $team_title = 'TBD';
  }

  $team_goals = $data['goals'];
  $goals_total = count($team_goals);
  // Process goals.
  $goals = [
    'team' => $team_name,
    't' => $goals_total,
    '1' => 0,
    '2' => 0,
    '3' => 0,
    '4' => NULL,
  ];
  foreach ($team_goals as $goal) {
    $goal_data = _goal_data($goal);
    $period = $goal_data['period'];
    $time = $goal_data['time'];
    $variables['goals'][$period][$time] = $goal_data;
    $goals[$period]++;
  }

  // Goalie.
  $goalie_data = [];
  $goalie_name = 'TBD';
  $shots_against = $saves = $sp = 0;
  if (!empty($data['goalie'])) {
    $goalie = $data['goalie'];
    $goalie_name = $team_name;
    if ($goalie) $goalie_name = $goalie->get('title')->value;
    $goalie_stats = $data['goalie_stats'];
    $shots_against = $goalie_stats['shots_against'] ?? 0;
    $goals_against = $goalie_stats['goals_against'] ?? 0;
    $saves = $shots_against - $goals_against;
    $sp = $shots_against > 0 ? $saves / $shots_against : 0;

  }
  $goalie_data = [
    'name' => $goalie_name,
    'saves' => $saves,
    'sp' => $sp,
  ];

  $variables[$data['team']] = [
    "team" => $team_name,
    "team_link" => $team_title,
    "score" => $goals_total,
    "sog" => $shots_against,
    "goalie" => $goalie_data,
    "goals" => $goals,
  ];;
}

function _goal_data($node) {
  $data = $node->get('field_goal_stats')->getValue()[0];
  $return['time'] = $data['goal_minute'] . ':' . $data['goal_seconds'];
  $return['period'] = $data['goal_period'];
  $player = $node->get('field_goal_player')->entity;
  if ($player) {
    $return['player_name'] = $player->get('title')->value ??'Sub';
    $return['player_number'] = $player->get('field_number')->value ?? '0';
  }
  else {
    $return['player_name'] = 'whoops';
    $return['player_number'] = '666';
  }

  $return['team'] = $node->get('field_team')->entity->get('title')->value;
  $return['detail'] = 'Unassisted';
  $assist1 = $node->get('field_assist')->entity;
  if ($assist1) {
    $return['detail'] = $assist1->get('field_last_name')->value;
  }
  $assist2 = $node->get('field_assist_2')->entity;
  if ($assist2) {
    $return['detail'] .= ', ' . $assist2->get('field_last_name')->value;
  }
  return $return;
}
